---
title: "Your Title"
subtitle: "STAT 253 Group Assignment 1"
date: today
author: "Olivia, Adam, and Liam"
format:
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
    code-tools: true
---



<!-- Your report should follow the format specified in the Group Assignment 1 Instructions. Please review that document carefully! -->





```{r}
#| include: false
# Load packages
library(tidyverse)
library(tidymodels)

# resolves package conflicts by preferring tidymodels functions
tidymodels_prefer() 

# if your group needs any other packages, add them here

```





# Research Goals

# Data

```{r}
#| message: false
#| warning: false
#| echo: false

# read in data

flight_train <- read.csv("Flights_Train.csv") 

head(flight_train)

```

```{r}
flight_train_dest_delayed<- flight_train %>% 
  filter(dep_delay>0)

flights_train_delayed<- flight_train %>% 
  mutate(delta=as.numeric(carrier=="DL"),
         skywest=as.numeric(carrier=="OO"))
```

```{r}
#| message: false
#| warning: false
#| echo: false

# visualization

ggplot(aes( x=dep_delay, fill=carrier_name), data=flight_train_dest_delayed)+
  geom_bar()
```

```{r}
ggplot(aes(x=dep_delay, fill=dest), data=flight_train_dest_delayed)+
  geom_histogram()
```


```{r}
top_three_delayed <- flight_train_dest_delayed %>%
  arrange(desc(dep_delay)) %>%
  slice(1:5)

top_three_delayed


only_delta<-flight_train_dest_delayed %>% 
  filter(carrier_name=="Delta Air Lines Inc.")
```

```{r}
ggplot(aes( y=dep_delay,fill=carrier_name ), data=only_delta)+
  geom_boxplot()

```

```{r}
ggplot(aes( y=dep_delay,x=dow, fill=carrier_name ), data=only_delta)+
  geom_jitter()
```
```{r}
ggplot(aes( y=dep_delay,x=hour, fill=carrier_name ), data=only_delta)+
  geom_boxplot()
```
```{r}

only_delta_dis_100<-only_delta %>% 
  filter(distance<1800)

ggplot(aes(x=distance, y=dep_delay), data=only_delta_dis_100)+
  geom_point()+
  geom_smooth(method="lm")
```
```{r}
sky_delta <- flight_train_dest_delayed %>%
  filter(carrier_name %in% c("Delta Air Lines Inc.", "SkyWest Airlines Inc."))

ggplot(aes( x=dep_delay), data=sky_delta)+
  geom_bar()+
  facet_wrap(~carrier_name)

```


# Model Building

```{r}
# Define the model specification for a Lasso regression
lasso_spec <- linear_reg() %>%
  set_mode("regression") %>%
  set_engine("glmnet") %>%
  set_args(mixture = 1, penalty = tune())

# Create a recipe for data preprocessing
variable_recipe <- recipe(dep_delay ~ ., data = flight_train_dest_delayed) %>%
  step_nzv(all_predictors()) %>% # Add step_nzv() to remove near-zero variance predictors
  step_dummy(all_nominal_predictors())

# Bundle the recipe and model into a workflow
lasso_workflow <- workflow() %>%
  add_recipe(variable_recipe) %>%
  add_model(lasso_spec)

# Tune the penalty parameter for the Lasso model
set.seed(253)
lasso_models <- lasso_workflow %>%
  tune_grid(
    grid = grid_regular(penalty(range = c(-5, 1)), levels = 100),
    resamples = vfold_cv(flight_train_dest_delayed, v = 10),
    metrics = metric_set(mae)
  )

# Select the most parsimonious penalty within one standard error of the best
parsimonious_penalty <- lasso_models %>%
  select_by_one_std_err(metric = "mae", desc(penalty))

# Print the selected penalty value
parsimonious_penalty

```
```{r}
final_lasso<-lasso_workflow %>% 
  finalize_workflow(parameters = parsimonious_penalty) %>% 
  fit(data = flight_train_dest_delayed) 


final_lasso %>% 
  tidy() %>% 
  filter(estimate!=0)
```


```{r}
parsimonious_results <- lasso_models %>% 
  collect_metrics() %>% 
  filter(penalty == parsimonious_penalty$penalty)

parsimonious_results
```


# Implementation

We used tidymodels to implement this model building process. See code below for full details.

<details>
<summary>View Code</summary>

```{r}
#| message: false
#| warning: false

# Define the model specification for KNN
knn_spec <- nearest_neighbor() %>%
  set_mode("regression") %>%
  set_engine("kknn") %>%
  set_args(neighbors = tune())

# Create a recipe for data preprocessing
knn_recipe <- recipe(dep_delay ~ ., data = flight_train_dest_delayed) %>%
  step_rm(tailnum, plane_engine, plane_model, plane_manufacturer) %>% # Remove tailnum - too many unique values
  step_nzv(all_predictors()) %>% # Remove near-zero variance predictors
  step_novel(all_nominal_predictors()) %>% # Handle new levels in categorical variables
  step_dummy(all_nominal_predictors()) %>% # Convert categorical to dummy variables
  step_normalize(all_numeric_predictors()) # Standardize numeric predictors (critical for KNN)

# Bundle the recipe and model into a workflow
knn_workflow <- workflow() %>%
  add_recipe(knn_recipe) %>%
  add_model(knn_spec)

# Tune the neighbors parameter for the KNN model
set.seed(253)
knn_models <- knn_workflow %>%
  tune_grid(
    grid = grid_regular(neighbors(range = c(5, 400)), levels = 20), 
    resamples = vfold_cv(flight_train_dest_delayed, v = 5), 
    metrics = metric_set(mae)
  )

# Select the best number of neighbors based on lowest MAE
best_k <- knn_models %>%
  select_best(metric = "mae")

best_k
```

```{r}
# Fit the final KNN model with optimal k
knn_final_model <- knn_workflow %>% 
  finalize_workflow(parameters = best_k) %>% 
  fit(data = flight_train_dest_delayed)

# View the results
best_k_results <- knn_models %>% 
  collect_metrics() %>% 
  filter(neighbors == best_k$neighbors)

best_k_results
```

```{r}
# Define the model specification for least squares
ls_spec <- linear_reg() %>%
  set_mode("regression") %>%
  set_engine("lm") 

# Create a recipe for data preprocessing
ls_recipe <- recipe(dep_delay ~ ., data = flight_train_dest_delayed) %>%
  step_rm(tailnum) %>% # Remove tailnum - too many unique values
  step_nzv(all_predictors()) %>% # Remove near-zero variance predictors
  step_novel(all_nominal_predictors()) %>% # Handle new levels
  step_dummy(all_nominal_predictors()) # Convert categorical to dummy variables

# Bundle the recipe and model into a workflow
ls_workflow <- workflow() %>%
  add_recipe(ls_recipe) %>%
  add_model(ls_spec)

# Fit the model and evaluate with cross-validation
set.seed(253)
ls_cv_results <- ls_workflow %>%
  fit_resamples(
    resamples = vfold_cv(flight_train_dest_delayed, v = 10),
    metrics = metric_set(mae)
  )

ls_cv_results %>%
  collect_metrics()
```

```{r}
# Fit least squares model on full training data
ls_final_model <- ls_workflow %>%
  fit(data = flight_train_dest_delayed)

ls_final_model %>%
  tidy() %>%
  arrange(desc(abs(estimate)))
```

</details>



# Model Evaluation

```{r}
#| message: false
#| warning: false
#| echo: false

# Visualize how MAE changes with different k values
knn_models %>%
  collect_metrics() %>%
  ggplot(aes(x = neighbors, y = mean)) +
  geom_line() +
  geom_point() +
  labs(
    title = "KNN Model Performance by Number of Neighbors",
    x = "Number of Neighbors (k)",
    y = "Mean Absolute Error (MAE)"
  ) +
  theme_minimal()


```
```{r}
ls_predictions <- ls_final_model %>%
  augment(new_data = flight_train_dest_delayed)

ggplot(ls_predictions, aes(x = dep_delay, y = .pred)) +
  geom_point(alpha = 0.3) +
  geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") 
  theme_minimal()
```


# Validation

```{r}
#| message: false
#| warning: false
#| error: true
# validate final model on test set
# NOTE: don't run this code chunk until you are done with all other parts of your report

Flights_Test <- read_csv('Flights_Test.csv')

knn_final_model %>% # name of your final model
  augment(new_data = Flights_Test) %>%
  mae(truth = dep_delay, estimate = .pred)


ls_final_model %>% # name of your final model
  augment(new_data = Flights_Test) %>%
  mae(truth = dep_delay, estimate = .pred)

 final_lasso%>% # name of your final model
  augment(new_data = Flights_Test) %>%
  mae(truth = dep_delay, estimate = .pred)
```




# Contributions




# Appendix

```{r}
#| eval: false
# put code for any other models or visualizations that you considered here
# use comments to explain what your code is doing
```


