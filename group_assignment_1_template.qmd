---
title: "Your Title"
subtitle: "STAT 253 Group Assignment 1"
date: today
author: "Olivia, Adam, and Liam"
format:
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
    code-tools: true
---



<!-- Your report should follow the format specified in the Group Assignment 1 Instructions. Please review that document carefully! -->

```{r}
#| include: false
# Load packages
library(tidyverse)
library(tidymodels)

# resolves package conflicts by preferring tidymodels functions
tidymodels_prefer() 

```

# Research Goals

# Data

## Remove unnecessary predictors

```{r}
#| message: false
#| warning: false
#| echo: false

# read in data

flight_train <- read.csv("Flights_Train.csv") 

head(flight_train)

```

```{r}
flights_train_delayed<- flight_train %>% 
  select(-tailnum,-carrier, -year,-dest_lat,-dest_lon, -dest_tz, -dest_dst, -plane_engines, -plane_seats, -plane_type, -dest)
```

```{r}
#| message: false
#| warning: false
#| echo: false

# visualization

ggplot(aes( x=dep_delay, fill=carrier_name), data=flights_train_delayed)+
  geom_bar()
```
```{r}
# delays by hour
ggplot(Flights_train, aes(x = factor(hour), y = dep_delay)) +
  geom_boxplot(fill = "lightblue") +
  labs(title = "Departure Delays by Hour of Day",
       x = "Hour", y = "Departure Delay (minutes)") +
  theme_minimal()

#by day
ggplot(Flights_train, aes(x = dow, y = dep_delay)) +
  geom_boxplot(fill = "lightgreen") +
  labs(title = "Departure Delays by Day of Week",
       x = "Day of Week", y = "Departure Delay (minutes)") +
  theme_minimal()

#by month
ggplot(Flights_train, aes(x = factor(month), y = dep_delay)) +
  geom_boxplot(fill = "lightyellow") +
  labs(title = "Departure Delays by Month",
       x = "Month", y = "Departure Delay (minutes)") +
  theme_minimal()

```



```{r}
top_three_delayed <- flights_train_delayed %>%
  arrange(desc(dep_delay)) %>%
  slice(1:5)

top_three_delayed


only_delta<-flights_train_delayed %>% 
  filter(carrier_name=="Delta Air Lines Inc.")
```

```{r}
ggplot(aes( y=dep_delay,fill=carrier_name ), data=only_delta)+
  geom_boxplot()

```

```{r}
ggplot(aes( y=dep_delay,x=dow, fill=carrier_name ), data=only_delta)+
  geom_jitter()
```
```{r}
ggplot(aes( y=dep_delay,x=hour, fill=carrier_name ), data=only_delta)+
  geom_boxplot()
```
```{r}

only_delta_dis_100<-only_delta %>% 
  filter(distance<1800)

ggplot(aes(x=distance, y=dep_delay), data=only_delta_dis_100)+
  geom_point()+
  geom_smooth(method="lm")
```
```{r}
sky_delta <- flights_train_delayed %>%
  filter(carrier_name %in% c("Delta Air Lines Inc.", "SkyWest Airlines Inc."))

ggplot(aes( x=dep_delay), data=sky_delta)+
  geom_bar()+
  facet_wrap(~carrier_name)

```


# Model Building

```{r}
# Define the model specification for a Lasso regression
lasso_spec <- linear_reg() %>%
  set_mode("regression") %>%
  set_engine("glmnet") %>%
  set_args(mixture = 1, penalty = tune())

# Create a recipe for data preprocessing
variable_recipe <- recipe(dep_delay ~ ., data = flights_train_delayed) %>%
  step_nzv(all_predictors()) %>% # Add step_nzv() to remove near-zero variance predictor
  step_novel(all_nominal_predictors()) %>% 
  step_dummy(all_nominal_predictors())

# Bundle the recipe and model into a workflow
lasso_workflow <- workflow() %>%
  add_recipe(variable_recipe) %>%
  add_model(lasso_spec)

# Tune the penalty parameter for the Lasso model
set.seed(253)
lasso_models <- lasso_workflow %>%
  tune_grid(
    grid = grid_regular(penalty(range = c(-5, 0.4)), levels = 100),
    resamples = vfold_cv(flights_train_delayed, v = 10),
    metrics = metric_set(mae, rsq)
  )

# Select the most parsimonious penalty within one standard error of the best
parsimonious_penalty <- lasso_models %>%
  select_by_one_std_err(metric = "mae", desc(penalty))

# Print the selected penalty value
parsimonious_penalty

```


```{r}
final_lasso<-lasso_workflow %>% 
  finalize_workflow(parameters = parsimonious_penalty) %>% 
  fit(data = flights_train_delayed) 


final_lasso %>% 
  tidy() %>% 
  filter(estimate!=0)
```


```{r}
parsimonious_results <- lasso_models %>% 
  collect_metrics() %>% 
  filter(penalty == parsimonious_penalty$penalty)

parsimonious_results
```

```{r}
final_lasso_results <- final_lasso %>%   
  augment(new_data = flights_train_delayed) %>% 
  mutate(.resid = dep_delay - .pred)
```


```{r}
final_lasso_results %>% 
  ggplot(aes(x = .pred, y = .resid)) + 
  geom_point() + 
  geom_hline(yintercept = 0)
```

```{r}
final_lasso_results %>% 
  ggplot(aes(x = .pred, y = .resid)) + 
  geom_point(alpha = 0.5) + 
  geom_hline(yintercept = 0, color = "red", linetype = "dashed", linewidth = 1) +
  labs(
    title = "Residual Plot",
    subtitle = "Checking for patterns in prediction errors",
    x = "Predicted Delay (minutes)",
    y = "Residual (Actual - Predicted)\nPositive = Underpredicted | Negative = Overpredicted"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(face = "bold", size = 14))
```

```{r}
ggplot(final_lasso_results, aes(x = .resid)) +
  geom_histogram(aes(y = after_stat(density)), bins = 50, 
                 fill = "steelblue", alpha = 0.7) +
  geom_vline(xintercept = 0, color = "darkred", linetype = "dashed") +
  labs(
    title = "Distribution of Residuals",
    x = "Residuals (minutes)",
    y = "Density"
  )
```
```{r}
ggplot(final_lasso_results, aes(x = dep_delay, y = .pred)) +
  geom_point(alpha = 0.3) +
  geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
  labs(
    title = "Predicted vs Actual Departure Delays",
    x = "Actual Delay (minutes)",
    y = "Predicted Delay (minutes)"
  )
```
```{r}
ggplot(final_lasso_results, aes(x = dep_delay, y = .pred)) +
  # Add shaded regions for interpretation
  annotate("rect", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = Inf, 
           fill = "lightgreen", alpha = 0.1) +
  annotate("rect", xmin = 0, xmax = 15, ymin = -Inf, ymax = Inf, 
           fill = "lightyellow", alpha = 0.1) +
  annotate("rect", xmin = 15, xmax = Inf, ymin = -Inf, ymax = Inf, 
           fill = "lightcoral", alpha = 0.1) +
  geom_point(alpha = 0.3, size = 1.5) +
  geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = 0, linetype = "dotted", color = "gray50") +
  geom_hline(yintercept = 0, linetype = "dotted", color = "gray50") +
  labs(
    title = "Model Predictions vs Actual Departure Delays",
    subtitle = "Points on the red line indicate perfect predictions",
    x = "Actual Departure Delay (minutes)\nNegative = Early | Positive = Delayed",
    y = "Predicted Delay (minutes)"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(face = "bold", size = 14))

```



# Implementation

We used tidymodels to implement this model building process. See code below for full details.

<details>
<summary>View Code</summary>

```{r}
#| message: false
#| warning: false

# Define the model specification for KNN
knn_spec <- nearest_neighbor() %>%
  set_mode("regression") %>%
  set_engine("kknn") %>%
  set_args(neighbors = tune())

# Create a recipe for data preprocessing
knn_recipe <- recipe(dep_delay ~ ., data = flights_train_delayed) %>%
  step_nzv(all_predictors()) %>% # Remove near-zero variance predictors
  step_novel(all_nominal_predictors()) %>% # Handle new levels in categorical variables
  step_dummy(all_nominal_predictors()) %>% # Convert categorical to dummy variables
  step_normalize(all_numeric_predictors()) # Standardize numeric predictors (critical for KNN)

# Bundle the recipe and model into a workflow
knn_workflow <- workflow() %>%
  add_recipe(knn_recipe) %>%
  add_model(knn_spec)

# Tune the neighbors parameter for the KNN model
set.seed(253)
knn_models <- knn_workflow %>%
  tune_grid(
    grid = grid_regular(neighbors(range = c(5, 400)), levels = 20), 
    resamples = vfold_cv(flights_train_delayed, v = 5), 
    metrics = metric_set(mae)
  )

# Select the best number of neighbors based on lowest MAE
best_k <- knn_models %>%
  select_best(metric = "mae")

best_k
```

```{r}
# Fit the final KNN model with optimal k
knn_final_model <- knn_workflow %>% 
  finalize_workflow(parameters = best_k) %>% 
  fit(data = flights_train_delayed)

# View the results
best_k_results <- knn_models %>% 
  collect_metrics() %>% 
  filter(neighbors == best_k$neighbors)

best_k_results
```

```{r}
# Define the model specification for least squares
ls_spec <- linear_reg() %>%
  set_mode("regression") %>%
  set_engine("lm") 

# Create a recipe for data preprocessing
ls_recipe <- recipe(dep_delay ~ ., data = flights_train_delayed) %>%
  step_rm(tailnum) %>% # Remove tailnum - too many unique values
  step_nzv(all_predictors()) %>% # Remove near-zero variance predictors
  step_novel(all_nominal_predictors()) %>% # Handle new levels
  step_dummy(all_nominal_predictors()) # Convert categorical to dummy variables

# Bundle the recipe and model into a workflow
ls_workflow <- workflow() %>%
  add_recipe(ls_recipe) %>%
  add_model(ls_spec)

# Fit the model and evaluate with cross-validation
set.seed(253)
ls_cv_results <- ls_workflow %>%
  fit_resamples(
    resamples = vfold_cv(flights_train_delayed, v = 10),
    metrics = metric_set(mae)
  )

ls_cv_results %>%
  collect_metrics()
```

```{r}
# Fit least squares model on full training data
ls_final_model <- ls_workflow %>%
  fit(data = flights_train_delayed)

ls_final_model %>%
  tidy() %>%
  arrange(desc(abs(estimate)))
```

</details>



# Model Evaluation

```{r}
#| message: false
#| warning: false
#| echo: false

# Visualize how MAE changes with different k values
knn_models %>%
  collect_metrics() %>%
  ggplot(aes(x = neighbors, y = mean)) +
  geom_line() +
  geom_point() +
  labs(
    title = "KNN Model Performance by Number of Neighbors",
    x = "Number of Neighbors (k)",
    y = "Mean Absolute Error (MAE)"
  ) +
  theme_minimal()


```
```{r}
ls_predictions <- ls_final_model %>%
  augment(new_data = flights_train_delayed)

ggplot(ls_predictions, aes(x = dep_delay, y = .pred)) +
  geom_point(alpha = 0.3) +
  geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") 
  theme_minimal()
```


# Validation

```{r}
#| message: false
#| warning: false
#| error: true
# validate final model on test set
# NOTE: don't run this code chunk until you are done with all other parts of your report

Flights_Test <- read_csv('Flights_Test.csv')

knn_final_model %>% # name of your final model
  augment(new_data = Flights_Test) %>%
  mae(truth = dep_delay, estimate = .pred)


ls_final_model %>% # name of your final model
  augment(new_data = Flights_Test) %>%
  mae(truth = dep_delay, estimate = .pred)

 final_lasso%>% # name of your final model
  augment(new_data = Flights_Test) %>%
  mae(truth = dep_delay, estimate = .pred)
```




# Contributions




# Appendix

```{r}
#| eval: false
# put code for any other models or visualizations that you considered here
# use comments to explain what your code is doing


Flights_train %>%
  mutate(wind_bin = cut(wind_speed, breaks = seq(0, 35, by = 5))) %>%
  group_by(wind_bin) %>%
  summarise(mean_delay = mean(dep_delay, na.rm = TRUE)) %>%
  filter(!is.na(wind_bin)) %>%
  ggplot(aes(x = wind_bin, y = mean_delay)) +
  geom_col(fill = "steelblue") +
  labs(title = "Mean Departure Delay by Wind Speed",
       x = "Wind Speed Range", y = "Mean Delay (minutes)")

Flights_train %>%
  mutate(visib_bin = cut(visib, breaks = c(0, 2, 5, 8, 10, 12))) %>%
  group_by(visib_bin) %>%
  summarise(mean_delay = mean(dep_delay, na.rm = TRUE)) %>%
  filter(!is.na(visib_bin)) %>%
  ggplot(aes(x = visib_bin, y = mean_delay)) +
  geom_col(fill = "coral") +
  labs(title = "Mean Departure Delay by Visibility",
       x = "Visibility Range", y = "Mean Delay (minutes)")

Flights_train %>%
  mutate(wind_bin = cut(wind_gust, breaks = seq(0, 35, by = 5))) %>%
  group_by(wind_bin) %>%
  summarise(mean_delay = mean(dep_delay, na.rm = TRUE)) %>%
  filter(!is.na(wind_bin)) %>%
  ggplot(aes(x = wind_bin, y = mean_delay)) +
  geom_col(fill = "steelblue") +
  labs(title = "Mean Departure Delay by Wind Gusts",
       x = "Wind Speed Range", y = "Mean Delay (minutes)")


# delays by hour
ggplot(Flights_train, aes(x = factor(hour), y = dep_delay)) +
  geom_boxplot(fill = "lightblue") +
  labs(title = "Departure Delays by Hour of Day",
       x = "Hour", y = "Departure Delay (minutes)") +
  theme_minimal()

#by day
ggplot(Flights_train, aes(x = dow, y = dep_delay)) +
  geom_boxplot(fill = "lightgreen") +
  labs(title = "Departure Delays by Day of Week",
       x = "Day of Week", y = "Departure Delay (minutes)") +
  theme_minimal()

#by month
ggplot(Flights_train, aes(x = factor(month), y = dep_delay)) +
  geom_boxplot(fill = "lightyellow") +
  labs(title = "Departure Delays by Month",
       x = "Month", y = "Departure Delay (minutes)") +
  theme_minimal()



```


